#Tugas kedua FisKom 
#FreeFall case with Romberg Method 

from math import *
import matplotlib.pyplot as plt
import numpy as np

#============================================================================
def qRomberg(Func, a, b, eps = 1e-6):
#----------------------------------------------------------------------------
# Integrates function Func on interval [a,b] with relative precision eps
# using the adaptive Romberg method
#----------------------------------------------------------------------------
    kmax = 30 # max. no. of step halving iterations
    r1 = [0]*(kmax+1) # two consecutive lines
    r2 = [0]*(kmax+1) # from the method table
    h = b-a; n = 1

    r1[0] = 0.5*h*(Func(a) + Func(b)) # initial approximation
    for k in range(1,kmax+1): # step halving loop
        sumf = 0e0
        for i in range(1,n+1): sumf += Func(a+(i-0.5)*h)
        r2[0] = 0.5*(r1[0] + h*sumf) # trapezoid formula
        f = 1e0
        for j in range(1,k+1): # increase quadrature order
            f *= 4
            r2[j] = (f*r2[j-1] - r1[j-1])/(f-1) # new approximation

        if (k > 1): # convergence check
            if (fabs(r2[k]-r1[k-1]) <= eps*fabs(r2[k])): break
            if (fabs(r2[k]) <= eps and fabs(r2[k]) <= fabs(r2[k]-r1[k-1])): break
        h *= 0.5; n *= 2 # halve integration step
        for j in range(0,k+1): r1[j] = r2[j] # shift table lines

    if (k >= kmax):
        print("qRomberg: max. no. of iterations exceeded !")
        k -= 1

    return r2[k]

# constants
g = 9.81 # gravitational acceleration (m/s^2)
m = 80  # mass (kg)
c = 10 # drag coefficient (kg/s)
total_time = 8.0  # seconds

# Define the velocity function
def velocity(t):
    return (g * m / c) * (1 - np.exp(-c * t / m))

# Define the displacement function
def displacement(t):
    return (g * m / c) * t + (c / m) * (1 - np.exp(-c * t / m))

# Use Romberg integration to compute the distance traveled
a = 0  # Start of the interval
b = total_time  # End of the interval
distance_traveled = qRomberg(displacement, a, b)

# plot the function
x = np.linspace(a, b, 1000)
y = [displacement(t) for t in x]

plt.plot(x, y)
plt.fill_between(x, y, 0, facecolor='cyan', alpha=0.5)
plt.xlabel('t (s)')
plt.ylabel('d (m)')
plt.title(r'$d = \frac{g \cdot m}{c} \left(t + \frac{c}{m} \left(1 - e^{-\frac{c}{m} \cdot t}\right)\right)$', fontsize=14)
plt.grid(axis='x')
plt.axhline(y=0, color='k')
plt.axvline(x=0, color='k')
plt.gca().spines['bottom'].set_position(('data', 0))
plt.gca().spines['left'].set_position(('data', 0))
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.text(2, 50, f"Distance Traveled = {distance_traveled:.6f} meters", fontsize=12)
plt.tight_layout()
plt.show()

print("Distance traveled during the first 8 seconds:", distance_traveled, "meters")
